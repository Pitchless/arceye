#!/usr/bin/env python

from __future__ import print_function
from arceye import *
from arceye.gui import *

def clamp(val, minv=-1.0, maxv=1.0):
    if val > maxv: return maxv
    if val < minv: return minv
    return val

class ArcEyePuppet(GuiDemo):
    def __init__(self, *args, **kw):
        super(ArcEyePuppet, self).__init__(*args, **kw)
        self._wink_thread = None
        self.target = Target(0,0,None)

    def init(self):
        super(ArcEyePuppet, self).init()
        pygame.key.set_repeat(20,20)

    def handle_event(self, event):
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_w:
                self.wink()
        if event.type == pygame.KEYDOWN:
            new_target = False
            if event.key == pygame.K_UP:
                self.target.y = clamp(self.target.y + 0.01)
                new_target = True
            if event.key == pygame.K_DOWN:
                self.target.y = clamp(self.target.y - 0.01)
                new_target = True
            if event.key == pygame.K_RIGHT:
                self.target.x = clamp(self.target.x + 0.01)
                new_target = True
            if event.key == pygame.K_LEFT:
                self.target.x = clamp(self.target.x - 0.01)
                new_target = True

            if new_target:
                self.eyes.go_to(self.target.x, self.target.y)

    def wink(self):
        loginfo("Hello")
        if self._wink_thread is not None and self._wink_thread.is_alive():
            return False
        self._wink_thread = Thread(target=self._wink)
        self.daemon = True
        return self._wink_thread.start()

    def _wink(self):
        loginfo("Wink")
        eye = self.eyes.eye1
        eye.go_to(l=0.7)
        sleep(2)
        eye.go_to(l=0.9)
        sleep(5)
        eye.go_to(l=0.4)
        sleep(2)
        eye.go_to(l=0.2)
        sleep(1)
        eye.go_to(l=0.0)
        sleep(2)
        loginfo("Done")

demo = ArcEyePuppet()
demo.init()
demo.start()
