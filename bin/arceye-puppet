#!/usr/bin/env python

from __future__ import print_function
from random import randint
from arceye import *
from arceye.gui import *

def clamp(val, minv=-1.0, maxv=1.0):
    if val > maxv: return maxv
    if val < minv: return minv
    return val

class ArcEyePuppet(GuiDemo):
    def __init__(self, *args, **kw):
        super(ArcEyePuppet, self).__init__(*args, **kw)
        self._wink1_thread = None
        self._wink2_thread = None
        self._blink_thread = None
        self._random_thread = None
        self._is_random = False
        self.target = Target(0,0,None)
        self.min_blink_time = 10
        self.max_blink_time = 30

    def init(self):
        super(ArcEyePuppet, self).init()
        pygame.key.set_repeat(20,20)

    def handle_event(self, event):
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_w:
                self.wink()
            elif event.key == pygame.K_e:
                self.wink2()
            elif event.key == pygame.K_b:
                self.blink()
            elif event.key == pygame.K_0:
                self.target = Target(0,0,0)
            elif event.key == pygame.K_r:
                if self._is_random:
                    self.stop_random()
                else:
                    self.start_random()
        if event.type == pygame.KEYDOWN:
            new_target = False
            if event.key == pygame.K_UP:
                self.target.y = clamp(self.target.y + 0.01)
                new_target = True
            if event.key == pygame.K_DOWN:
                self.target.y = clamp(self.target.y - 0.01)
                new_target = True
            if event.key == pygame.K_RIGHT:
                self.target.x = clamp(self.target.x + 0.01)
                new_target = True
            if event.key == pygame.K_LEFT:
                self.target.x = clamp(self.target.x - 0.01)
                new_target = True

            if new_target:
                self.eyes.go_to(self.target.x, self.target.y)

    def start_random(self):
        loginfo("Start random")
        if self._random_thread is not None and self._random_thread.is_alive():
            return True
        self._is_random = True
        self._random_thread = Thread(target=self._random)
        return self._random_thread.start()

    def stop_random(self):
        loginfo("Stop random")
        self._is_random = False

    def _random(self):
        while self._is_random and not self.done:
            self.blink()
            blink_time = randint(self.min_blink_time, self.max_blink_time)
            loginfo("Next blink in %s"%blink_time)
            for i in range(0,blink_time):
                if not self._is_random or self.done: return
                sleep(1)

    def wink(self):
        return self.wink1()

    def wink1(self):
        if self._wink1_thread is not None and self._wink1_thread.is_alive():
            return False
        self._wink1_thread = Thread(target=self._wink1)
        return self._wink1_thread.start()

    def wink2(self):
        if self._wink2_thread is not None and self._wink2_thread.is_alive():
            return False
        self._wink2_thread = Thread(target=self._wink2)
        return self._wink2_thread.start()

    def _wink1(self):
        if not self.eyes.eye1: return
        return self._wink(self.eyes.eye1)

    def _wink2(self):
        if not self.eyes.eye2: return
        return self._wink(self.eyes.eye2)

    def _wink(self, eye):
        loginfo("Wink")
        eye.go_to(l=0.7)
        sleep(2)
        eye.go_to(l=0.9)
        sleep(3)
        eye.go_to(l=0.4)
        sleep(2)
        eye.go_to(l=0.2)
        sleep(1)
        eye.go_to(l=0.0)
        sleep(2)
        loginfo("Done Wink")

    def blink(self):
        if self._blink_thread is not None and self._blink_thread.is_alive():
            return False
        self._blink_thread = Thread(target=self._blink)
        return self._blink_thread.start()

    def _blink(self):
        t1 = Thread(target=self._wink1)
        t2 = Thread(target=self._wink2)
        t1.start()
        t2.start()
        t1.join()
        t2.join()

demo = ArcEyePuppet()
demo.init()
demo.start()
