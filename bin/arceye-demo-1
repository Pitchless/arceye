#!/usr/bin/env python

from __future__ import print_function
import sys, os
import yaml
from arceye import *
from arceye.gui import *

# Read config from command line if set
config_file = None
if len(sys.argv) > 1:
    config_file = sys.argv[1]
    config = yaml.load(file(sys.argv[1]))

config_file_2 = None
if len(sys.argv) > 2:
    config_file_2 = sys.argv[2]

class Demo1(GuiBase):
    def init(self):
        super(Demo1, self).init()
        self.name = "ArcEye Demo 1"

    def handle_keys_pressed(self, keys):
        # Stop!
        if keys[pygame.K_SPACE]:
            self.eyes.stop()
        elif keys[pygame.K_0]:
            self.eyes.zero_target()

        # Controllers on/off
        elif keys[pygame.K_1]:
            self.eye1.yaw.toggle_active()
        elif keys[pygame.K_2]:
            self.eye1.pitch.toggle_active()
        elif keys[pygame.K_3]:
            self.eye1.lid.toggle_active()
        elif keys[pygame.K_4]:
            self.eye2.yaw.toggle_active()
        elif keys[pygame.K_5]:
            self.eye2.pitch.toggle_active()
        elif keys[pygame.K_6]:
            self.eye2.lid.toggle_active()

    def display_help(self):
        self.guitxt.text("TODO")

    def display(self):
        # Update the display
        if self.eye1:
            self.display_eye(self.eye1)
        if self.eye2:
            self.guitxt.y = 40
            self.guitxt.x = 300
            self.display_eye(self.eye2)
            self.guitxt.x = 10

gui = Demo1(config1=config_file, config2=config_file_2)
gui.init()
gui.run(thread=True)

while not gui.eyes.eye1.is_connected:
    loginfo("Waiting for eye1")
    sleep(1)
gui.eyes.eye1.activate()

while not gui.done:
    loginfo("Hello")
    
    gui.eyes.eye1.go_to(0.9, 0.0)
    sleep(5)
    gui.eyes.eye1.go_to(0.0, 0.0)
    sleep(5)

    #gui.eyes.eye1.go_to(0.5, 0.0)
    #sleep(3)
    #gui.eyes.eye1.go_to(0.9, 0.0)
    #sleep(3)

    #gui.eyes.eye1.go_to(0.5, 0.0)
    #sleep(3)
    #gui.eyes.eye1.go_to(0.0, 0.0)
    #sleep(3)

    gui.eyes.eye1.go_to(-0.9, 0.0)
    sleep(5)
    gui.eyes.eye1.go_to(0.0, 0.0)
    sleep(5)

gui.eyes.eye1.deactivate()
