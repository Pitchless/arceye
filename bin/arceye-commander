#!/usr/bin/env python

from __future__ import print_function
import sys
from serial import Serial, SerialException
from time import sleep
import pygame

port = '/dev/ttyUSB0'
# Read port from command line if set
if len(sys.argv) > 1:
    port = sys.argv[1]

dead_zone = 0.1
# Used to scale the joystick axis
max_pwm_yaw = 50
max_pwm_pitch = 50
max_pwm_lid = 120

# 1 same as status from arduino (glitchy!). 4 = every 4 statuses etc
command_rate = 4

def loginfo(*msg):
    print("INFO:", *msg)

def logerr(*msg):
    print("ERROR:", *msg, file=sys.stderr)


# The recipe gives simple implementation of a Discrete
# Proportional-Integral-Derivative (PID) controller. PID controller gives output
# value for error between desired reference input and measurement feedback to
# minimize error value.
# More information: http://en.wikipedia.org/wiki/PID_controller
# cnr437@gmail.com
#
#######	Example	#########
#
# p=PID(3.0,0.4,1.2)
# p.setPoint(5.0)
# while True:
#      pid = p.update(measurement_value)
class PID:
    """
    Discrete PID control
    """

    def __init__(self, P=1.0, I=0.0, D=1.0, Derivator=0, Integrator=0, Integrator_max=500, Integrator_min=-500):

        self.Kp=P
        self.Ki=I
        self.Kd=D
        self.Derivator=Derivator
        self.Integrator=Integrator
        self.Integrator_max=Integrator_max
        self.Integrator_min=Integrator_min

        self.set_point=0.0
        self.error=0.0

    def update(self,current_value):
        """
        Calculate PID output value for given reference input and feedback
        """

        self.error = self.set_point - current_value

        self.P_value = self.Kp * self.error
        self.D_value = self.Kd * ( self.error - self.Derivator)
        self.Derivator = self.error

        self.Integrator = self.Integrator + self.error

        if self.Integrator > self.Integrator_max:
            self.Integrator = self.Integrator_max
        elif self.Integrator < self.Integrator_min:
            self.Integrator = self.Integrator_min

        self.I_value = self.Integrator * self.Ki

        PID = self.P_value + self.I_value + self.D_value

        return PID

    def setPoint(self,set_point):
        """
        Initilize the setpoint of PID
        """
        self.set_point = set_point
        self.Integrator=0
        self.Derivator=0

    def setIntegrator(self, Integrator):
        self.Integrator = Integrator

    def setDerivator(self, Derivator):
        self.Derivator = Derivator

    def setKp(self,P):
        self.Kp=P

    def setKi(self,I):
        self.Ki=I

    def setKd(self,D):
        self.Kd=D

    def getPoint(self):
        return self.set_point

    def getError(self):
        return self.error

    def getIntegrator(self):
        return self.Integrator

    def getDerivator(self):
        return self.Derivator


class Joint(object):
    """A single joint on the eye (yaw, pitch, lid), covers sensor and motor."""
    def __init__(self, name):
        self.name       = name
        self.command    = 0
        self.pwm_limit = 255
        self.pos        = 0
        self.pos_raw    = 0
        self.pos_center = 0
        self.pos_min    = -100
        self.pos_max    = 100
        self.brake_cmd  = 0
        self.active     = False
        self.pid        = PID()

    def set_pos_raw(self, v):
        self.pos_raw = v
        self.pos = v - self.pos_center

    @property
    def target(self):
        return self.pid.getPoint()

    @target.setter
    def target(self, value):
        self.pid.setPoint(value)

    @property
    def error(self):
        return self.pid.getError()

    def toggle_active(self):
        if self.active:
            self.active = False
            self.command = 0
        else:
            self.active = True
        return self.active

    def get_pwm(self):
        # Dont try to drive motors while breaking
        if self.brake_cmd:
            return 0
        pwm = abs(self.command)
        if pwm > self.pwm_limit:
            pwm = self.pwm_limit
        return pwm

    def get_direction(self):
        if self.command < 0:
            return 0
        return 1

    def get_brake_cmd(self):
        if self.brake_cmd:
            return 1
        return 0

    def update(self):
        if not self.active:
            return
        cmd = self.pid.update(self.pos)
        if self.pos >= self.pos_max and cmd > 0:
            # Ignore positive commands over the max
            cmd = 0
        elif self.pos <= self.pos_min and cmd < 0:
            cmd = 0
        self.command = cmd

class ArcEye(object):
    """
    Object representing a complete eye, which it connects to over the serial
    link to the arduino. Recieves status and sends commands. Manages a set of
    Joint objects for the yaw, pitch and lid joints.
    """
    def __init__(self, port="/dev/ttyUSB0"):
        self.port   = port
        self.status = None
        self.yaw    = Joint("yaw")
        self.pitch  = Joint("pitch")
        self.lid    = Joint("lid")

    def all_joints(self):
        return (self.yaw, self.pitch, self.lid)

    def connect(self):
        try:
            self.ser = Serial(port, 9600)
        except SerialException as e:
            logerr("Failed to connect to arduino serial. Is it plugged in?\n", e)
            return False
        sleep(3) # wait for the board to reset
        loginfo("Connected to %s"%port)
        return True

    def read_status(self):
        try:
            self.status = self.ser.readline()
            self.status = self.status.strip()
            for stat in self.status.split(";"):
                if not stat or stat == "":
                    continue
                (name, value) = stat.split("=")
                jname = "UnknownJoint"
                joint = None
                if name == "yaw_pos":
                    joint = self.yaw
                elif name == "pitch_pos":
                    joint = self.pitch
                elif name == "lid_pos":
                    joint = self.lid
                else:
                    logerr("Unknown joint in status %s"%name)
                    continue
                #joint.pos = float(value)
                joint.set_pos_raw(float(value))
        except Exception as e:
            logerr(e)

    def send_commands(self):
        cmd = ""
        cmd = "%s,%s,%s,%s,%s,%s,%s,%s,%s\n"%(
            self.yaw.get_pwm(), self.yaw.get_direction(), self.yaw.get_brake_cmd(),
            self.pitch.get_pwm(), self.pitch.get_direction(), self.pitch.get_brake_cmd(),
            self.lid.get_pwm(), self.lid.get_direction(), self.lid.get_brake_cmd(),
                )
        self.ser.write(cmd)

    def update(self):
        for j in self.all_joints():
            j.update()


# This is a simple pygame class that will help us print to the screen
class TextPrint:
    def __init__(self, screen, text_color=(0,255,0), font=None):
        self.reset()
        self.screen     = screen
        self.font       = pygame.font.Font(None, 20) if not font else font
        self.text_color = text_color

    def text(self, textString):
        textBitmap = self.font.render(textString, True, self.text_color)
        self.screen.blit(textBitmap, [self.x, self.y])
        self.y += self.line_height

    def reset(self):
        self.x = 10
        self.y = 10
        self.line_height = 15

    def indent(self):
        self.x += 10

    def unindent(self):
        self.x -= 10


# Util func to clamp a value in a deadzone
def dead_zoned(val, dead_zone=dead_zone):
    if val > -dead_zone and val < dead_zone:
        return 0
    return val

# If pid is running set target else raw command
def joint_ui_command(joint,val):
    if joint.active: # pid is running
        joint.target += val
    else:
        joint.command += val

# Start the eye
eye = ArcEye(port)
eye.yaw.pwm_limit = 40
eye.yaw.pos_center = 353 # raw
eye.yaw.pos_max = 120 # scaled
eye.yaw.pos_min = -100 # scaled
eye.yaw.pid.setKp(0.2)
eye.pitch.pwm_limit = 70
eye.pitch.pos_center = 484
eye.pitch.pos_max = 400
eye.pitch.pos_min = -200
eye.connect()

# Start the gui
pygame.init()
pygame.display.set_caption("ArcEye")
screen = pygame.display.set_mode( (320,460) )
screen.fill((0, 0, 0))
guitxt = TextPrint(screen)

# Grab the joystick
joystick = None
pygame.joystick.init()
try:
    joystick = pygame.joystick.Joystick(0)
    joystick.init()
    loginfo("Joystick 0")
except pygame.error as e:
    logerr("Joystick fail %s"%e)

# Main loop
frame = 0
done = False
while not done:
        frame += 1

        eye.read_status()

        # Joystick and other events
        for event in pygame.event.get(): # User did something
            if event.type == pygame.QUIT: # If user clicked close
                done=True # Flag that we are done so we exit this loop
            elif event.type == pygame.JOYAXISMOTION:
                eye.yaw.command = dead_zoned(joystick.get_axis(0)) * max_pwm_yaw;
                eye.pitch.command = dead_zoned(joystick.get_axis(1)) * max_pwm_pitch;
                eye.lid.command = dead_zoned(joystick.get_axis(2)) * max_pwm_lid;
            if event.type == pygame.JOYBUTTONDOWN:
                print("Joystick button pressed.")
            if event.type == pygame.JOYBUTTONUP:
                print("Joystick button released.")

        # Keyboard shortcuts
        keys = pygame.key.get_pressed()
        if keys[pygame.K_ESCAPE]:
                done = True
        elif keys[pygame.K_SPACE]:
            for j in eye.all_joints():
                j.command = 0
                j.active = False
        elif keys[pygame.K_a]:
            joint_ui_command(eye.yaw, 1)
        elif keys[pygame.K_d]:
            joint_ui_command(eye.yaw, -1)
        elif keys[pygame.K_w]:
            joint_ui_command(eye.pitch, 1)
        elif keys[pygame.K_s]:
            joint_ui_command(eye.pitch, -1)
        # Brakes
        elif keys[pygame.K_r]:
            eye.yaw.brake_cmd = 1
        elif keys[pygame.K_f]:
            eye.yaw.brake_cmd = 0
        elif keys[pygame.K_t]:
            eye.pitch.brake_cmd = 1
        elif keys[pygame.K_g]:
            eye.pitch.brake_cmd = 0
        elif keys[pygame.K_y]:
            eye.lid.brake_cmd = 1
        elif keys[pygame.K_h]:
            eye.lid.brake_cmd = 0
        # Controllers on/off
        elif keys[pygame.K_1]:
            eye.yaw.toggle_active()
        elif keys[pygame.K_2]:
            eye.pitch.toggle_active()
        elif keys[pygame.K_3]:
            eye.lid.toggle_active()

        # Update joints (runs there pids)
        eye.update()

        # Send new commands.
        if frame % command_rate == 0:
            eye.send_commands()

        screen.fill((0,0,0))
        guitxt.reset()
        guitxt.text("Frame: %s"%frame)
        #guitxt.text("Status %s"%eye.status)
        guitxt.text("")
        for j in eye.all_joints():
            guitxt.text(j.name)
            guitxt.indent()
            guitxt.text("Pos raw: " + str(j.pos_raw))
            guitxt.text("Position: " + str(j.pos))
            guitxt.text("Command: %s"%j.command)
            guitxt.text("PWM: %s Dir:%s"%(j.get_pwm(),j.get_direction()))
            guitxt.text("Brake: %s"%j.brake_cmd)
            guitxt.text("Active: %s"%j.active)
            guitxt.indent()
            guitxt.text("Target: %s"%j.target)
            guitxt.text("Error: %s"%j.error)
            guitxt.text("P:%s I:%s D:%s"%(j.pid.Kp, j.pid.Ki, j.pid.Kd))
            guitxt.unindent()
            guitxt.unindent()

        # Go ahead and update the screen with what we've drawn.
        pygame.display.flip()
