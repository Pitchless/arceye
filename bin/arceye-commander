#!/usr/bin/env python

from __future__ import print_function
import sys, os
import yaml
from arceye import *
from arceye.gui import *

# Read config from command line if set
config = {}
config_file = None
if len(sys.argv) > 1:
    config_file = sys.argv[1]
    config = yaml.load(file(sys.argv[1]))

config_file_2 = None
if len(sys.argv) > 2:
    config_file_2 = sys.argv[2]

dead_zone = 0.1
if config.has_key('dead_zone'): dead_zone = config['dead_zone']
# Which axis for which joint. Works with stick axis, triggers may be odd.
yaw_axis=0
pitch_axis=1
lid_axis=4

# Util func to clamp a value in a deadzone
def dead_zoned(val, dead_zone=dead_zone):
    if val > -dead_zone and val < dead_zone:
        return 0
    return val

# If pid is running set target else raw command
def joint_ui_command(joint,val):
    if joint.active: # pid is running
        joint.target += val
    else:
        joint.command += val

def joy_axis_command(j,axis):
    #if not axis == 0:
    #    axis = ( axis - (dead_zone*axis/abs(axis)) )/dead_zone
    if j.active: # pid is running
        if axis >= 0:
            j.target = axis * abs(j.pos_max)
        else:
            j.target = axis * abs(j.pos_min)
    else:
        j.command = axis * j.pwm_limit

# Setup the eye
class Commander(GuiBase):
    def __init__(self, *args, **kw):
        super(Commander, self).__init__(*args, **kw)
        self.w = 640
        self.h = 640

    def init(self):
        super(Commander, self).init()
        # Grab the joystick
        self.joystick = None
        pygame.joystick.init()
        try:
            self.joystick = pygame.joystick.Joystick(0)
            self.joystick.init()
            loginfo("Joystick 0")
        except pygame.error as e:
            logerr("Joystick fail %s"%e)

    def handle_event(self, event):
        # Joystick and other events
        if event.type == pygame.JOYAXISMOTION:
            joy_axis_command(self.eye.yaw, dead_zoned(self.joystick.get_axis(yaw_axis)));
            joy_axis_command(self.eye.pitch, dead_zoned(self.joystick.get_axis(pitch_axis)));
            joy_axis_command(self.eye.lid, dead_zoned(self.joystick.get_axis(lid_axis)));
        if event.type == pygame.JOYBUTTONDOWN:
            print("Joystick button pressed.")
        if event.type == pygame.JOYBUTTONUP:
            print("Joystick button released.")

    def handle_keys_pressed(self, keys):
        if keys[pygame.K_SPACE]:
            self.eyes.deactivate()
        elif keys[pygame.K_0]:
            self.eyes.zero_target()

        # Eyey1
        elif keys[pygame.K_a]:
            joint_ui_command(self.eye1.yaw, 1)
        elif keys[pygame.K_d]:
            joint_ui_command(self.eye1.yaw, -1)
        elif keys[pygame.K_w]:
            joint_ui_command(self.eye1.pitch, 1)
        elif keys[pygame.K_s]:
            joint_ui_command(self.eye1.pitch, -1)
        elif keys[pygame.K_e]:
            joint_ui_command(self.eye1.lid, 1)
        elif keys[pygame.K_q]:
            joint_ui_command(self.eye1.lid, -1)

        # Eye2
        elif keys[pygame.K_j]:
            joint_ui_command(self.eye2.yaw, 1)
        elif keys[pygame.K_l]:
            joint_ui_command(self.eye2.yaw, -1)
        elif keys[pygame.K_i]:
            joint_ui_command(self.eye2.pitch, 1)
        elif keys[pygame.K_k]:
            joint_ui_command(self.eye2.pitch, -1)
        elif keys[pygame.K_u]:
            joint_ui_command(self.eye2.lid, 1)
        elif keys[pygame.K_o]:
            joint_ui_command(self.eye2.lid, -1)

        # Brakes eye1
        elif keys[pygame.K_LSHIFT] and keys[pygame.K_z]:
            self.eye1.yaw.brake_cmd = 0
        elif keys[pygame.K_z]:
            self.eye1.yaw.brake_cmd = 1
        elif keys[pygame.K_LSHIFT] and keys[pygame.K_x]:
            self.eye1.pitch.brake_cmd = 0
        elif keys[pygame.K_x]:
            self.eye1.pitch.brake_cmd = 1
        elif keys[pygame.K_LSHIFT] and keys[pygame.K_c]:
            self.eye1.lid.brake_cmd = 0
        elif keys[pygame.K_c]:
            self.eye1.lid.brake_cmd = 1

        # Brakes eye2
        elif keys[pygame.K_LSHIFT] and keys[pygame.K_b]:
            self.eye2.yaw.brake_cmd = 0
        elif keys[pygame.K_b]:
            self.eye2.yaw.brake_cmd = 1
        elif keys[pygame.K_LSHIFT] and keys[pygame.K_n]:
            self.eye2.pitch.brake_cmd = 0
        elif keys[pygame.K_n]:
            self.eye2.pitch.brake_cmd = 1
        elif keys[pygame.K_LSHIFT] and keys[pygame.K_m]:
            self.eye2.lid.brake_cmd = 0
        elif keys[pygame.K_m]:
            self.eye2.lid.brake_cmd = 1

        # Controllers on/off
        elif keys[pygame.K_1]:
            self.eye1.yaw.toggle_active()
        elif keys[pygame.K_2]:
            self.eye1.pitch.toggle_active()
        elif keys[pygame.K_3]:
            self.eye1.lid.toggle_active()
        elif keys[pygame.K_4]:
            self.eye2.yaw.toggle_active()
        elif keys[pygame.K_5]:
            self.eye2.pitch.toggle_active()
        elif keys[pygame.K_6]:
            self.eye2.lid.toggle_active()

    def display_help(self):
        self.guitxt.text("SPACE   - Zero commands and controllers.")
        self.guitxt.text("w,a,s,d - eye1 yaw, pitch")
        self.guitxt.text("q,e     - eye1 lid")
        self.guitxt.text("j,l,i,k - eye2 yaw, pitch")
        self.guitxt.text("u,o     - eye2 lid")
        self.guitxt.text("1,2,3   - eye1 toggle yaw,pitch,lid controller (PID)")
        self.guitxt.text("4,5,6   - eye2 toggle yaw,pitch,lid controller (PID)")
        self.guitxt.text("z,x,c   - eye1 yaw,pitch,lid brake on")
        self.guitxt.text("Z,X,C   - eye1 yaw,pitch,lid brake on")
        self.guitxt.text("b,n,m   - eye2 yaw,pitch,lid brake on")
        self.guitxt.text("B,N,M   - eye2 yaw,pitch,lid brake on")
        self.guitxt.text("")
        self.guitxt.text("Left Stick - yaw")
        self.guitxt.text("Right Stick - pitch")
        self.guitxt.text("Left Trigger - lid")

    def display(self):
        # Update the display
        if self.eye1:
            self.display_eye(self.eye1)
        if self.eye2:
            self.guitxt.y = 40
            self.guitxt.x = 300
            self.display_eye(self.eye2)
            self.guitxt.x = 10

gui = Commander(config1=config_file, config2=config_file_2)
gui.init()
gui.run()
