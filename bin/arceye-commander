#!/usr/bin/env python

from __future__ import print_function
import sys
from serial import Serial, SerialException
from time import sleep
import pygame

port = '/dev/ttyUSB0'

def loginfo(*msg):
    print("INFO:", *msg)

def logerr(*msg):
    print("ERROR:", *msg, file=sys.stderr)

def display(str):
        text = font.render(str, True, (255, 255, 255), (159, 182, 205))
        textRect = text.get_rect()
        textRect.centerx = screen.get_rect().centerx
        textRect.centery = screen.get_rect().centery
        screen.blit(text, textRect)
        pygame.display.update()

# This is a simple class that will help us print to the screen
class TextPrint:
    def __init__(self, screen):
        self.reset()
        self.screen = screen
        self.font = pygame.font.Font(None, 20)
        self.text_color = (0,255,0)

    def text(self, textString):
        textBitmap = self.font.render(textString, True, self.text_color)
        self.screen.blit(textBitmap, [self.x, self.y])
        self.y += self.line_height

    def reset(self):
        self.x = 10
        self.y = 10
        self.line_height = 15

    def indent(self):
        self.x += 10

    def unindent(self):
        self.x -= 10

try:
    ser = Serial(port, 9600)
except SerialException as e:
    logerr("Failed to connect to arduino serial. Is it plugged in?\n", e)
    sys.exit(23)
sleep(3) # wait for the board to reset
loginfo("Connected to %s"%port)

class Joint(object):
    def __init__(self, name):
        self.name = name
        self.command = 0
        self.pos = 0

    def get_pwm(self):
        pwm = abs(self.command)
        if pwm > 255:
            pwm = 255
        return pwm

    def get_direction(self):
        if self.command < 0:
            return 0
        return 1

joints = {
    "yaw": Joint("yaw"),
    "pitch": Joint("pitch"),
    "lid": Joint("lid"),
}

status = None

def read_status():
    global status
    global joints
    try:
        status = ser.readline()
        status = status.strip()
        for stat in status.split(";"):
            if not stat or stat == "":
                continue
            (name, value) = stat.split("=")
            jname = "UnknownJoint"
            if name == "yaw_pos":
                jname = "yaw"
            elif name == "pitch_pos":
                jname = "pitch"
            elif name == "lid_pos":
                jname = "lid"
            joints[jname].pos = value
    except Exception as e:
        logerr(e)

def send_commands():
    global joints
    cmd = ""
    cmd = "%s,%s,%s,%s,%s,%s\n"%(
            joints["yaw"].get_pwm(), joints["yaw"].get_direction(),
            joints["pitch"].get_pwm(), joints["pitch"].get_direction(),
            joints["lid"].get_pwm(), joints["lid"].get_direction(),
            )
    ser.write(cmd)

pygame.init()
screen = pygame.display.set_mode( (640,480) )
guitxt = TextPrint(screen)
pygame.display.set_caption('Python numbers')
screen.fill((159, 182, 205))
font = pygame.font.Font(None, 17)
# Used to manage how fast the screen updates
clock = pygame.time.Clock()
num = 0
done = False
while not done:
        num += 1
        #pygame.event.pump()
        for event in pygame.event.get(): # User did something
            if event.type == pygame.QUIT: # If user clicked close
                done=True # Flag that we are done so we exit this loop
        keys = pygame.key.get_pressed()
        if keys[pygame.K_ESCAPE]:
                done = True
        elif keys[pygame.K_a]:
            joints['yaw'].command += 1
        elif keys[pygame.K_d]:
            joints['yaw'].command -= 1
        elif keys[pygame.K_w]:
            joints['pitch'].command += 1
        elif keys[pygame.K_s]:
            joints['pitch'].command -= 1

        read_status()

        if num % 10 == 0:
            send_commands()

        screen.fill((0,0,0))
        guitxt.reset()
        guitxt.text("Hello %s"%num)
        guitxt.text("Status %s"%status)
        for j in joints.values():
            guitxt.text(j.name)
            guitxt.indent()
            guitxt.text("Position: " + str(j.pos))
            guitxt.text("Command: %s"%j.command)
            guitxt.unindent()

        # Go ahead and update the screen with what we've drawn.
        pygame.display.flip()
        # Limit to 20 frames per second
        #clock.tick(20)
